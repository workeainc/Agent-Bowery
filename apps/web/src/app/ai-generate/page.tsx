'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { useSession } from 'next-auth/react';
import AppShell from '@/components/layout/AppShell';
import QualityCheckResults from '@/components/content/QualityCheckResults';
import OptimizationSuggestions from '@/components/content/OptimizationSuggestions';
import { apiClient } from '@/lib/api-client';
import { ContentManager } from '@/components/auth/RoleGuard';

export default function AIGenerationPage() {
  const router = useRouter();
  const { data: session } = useSession();
  const [loading, setLoading] = useState(false);
  const [generating, setGenerating] = useState(false);
  const [generatedContent, setGeneratedContent] = useState<string>('');
  const [formData, setFormData] = useState({
    prompt: '',
    contentType: 'BLOG',
    tone: 'professional',
    length: 'medium',
    keywords: '',
    targetAudience: '',
  });

  const handleGenerate = async () => {
    if (!formData.prompt.trim()) {
      alert('Please enter a prompt');
      return;
    }

    setGenerating(true);
    
    try {
      const result = await apiClient.generateContent({
        prompt: formData.prompt,
        contentType: formData.contentType,
        tone: formData.tone,
        length: formData.length,
        keywords: formData.keywords.split(',').map(k => k.trim()).filter(k => k),
        targetAudience: formData.targetAudience,
      });
      
      setGeneratedContent(result.content || 'Content generated successfully!');
    } catch (error) {
      console.error('Failed to generate content:', error);
      // Mock content for demo purposes
      setGeneratedContent(`# ${formData.prompt}

This is AI-generated content based on your prompt: "${formData.prompt}"

**Content Type:** ${formData.contentType}
**Tone:** ${formData.tone}
**Length:** ${formData.length}
${formData.keywords ? `**Keywords:** ${formData.keywords}` : ''}
${formData.targetAudience ? `**Target Audience:** ${formData.targetAudience}` : ''}

---

*This is a demonstration of AI content generation. In a real implementation, this would be generated by the AI system.*`);
    } finally {
      setGenerating(false);
    }
  };

  const handleSaveContent = async () => {
    if (!generatedContent.trim()) {
      alert('No content to save');
      return;
    }

    setLoading(true);
    
    try {
      await apiClient.createContent({
        title: formData.prompt,
        type: formData.contentType as any,
        status: 'DRAFT',
        tags: formData.keywords.split(',').map(k => k.trim()).filter(k => k),
        metadata: { body: generatedContent },
      });
      
      alert('Content saved successfully!');
      router.push('/content');
    } catch (error) {
      console.error('Failed to save content:', error);
      alert('Failed to save content. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleClear = () => {
    setFormData({
      prompt: '',
      contentType: 'BLOG',
      tone: 'professional',
      length: 'medium',
      keywords: '',
      targetAudience: '',
    });
    setGeneratedContent('');
  };

  return (
    <ContentManager fallback={
      <AppShell>
        <div className="flex items-center justify-center h-64">
          <div className="text-center">
            <h1 className="text-2xl font-bold text-gray-900 mb-2">Access Denied</h1>
            <p className="text-gray-600">You don't have permission to generate AI content.</p>
          </div>
        </div>
      </AppShell>
    }>
      <AppShell>
        <div className="max-w-6xl mx-auto">
          <div className="mb-8">
            <h1 className="text-3xl font-bold text-gray-900">AI Content Generation</h1>
            <p className="text-gray-600 mt-2">
              Generate high-quality content using AI-powered prompts
            </p>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            {/* Generation Form */}
            <div className="space-y-6">
              <div className="card">
                <div className="card-header">
                  <h3 className="card-title">Content Generation</h3>
                  <p className="card-description">
                    Configure your AI content generation parameters
                  </p>
                </div>
                <div className="card-content space-y-4">
                  {/* Prompt */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Prompt *
                    </label>
                    <textarea
                      value={formData.prompt}
                      onChange={(e) => setFormData({ ...formData, prompt: e.target.value })}
                      className="input w-full h-24 resize-none"
                      placeholder="Describe what content you want to generate..."
                      disabled={generating}
                    />
                  </div>

                  {/* Content Type */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Content Type
                    </label>
                    <select
                      value={formData.contentType}
                      onChange={(e) => setFormData({ ...formData, contentType: e.target.value })}
                      className="input w-full"
                      disabled={generating}
                    >
                      <option value="BLOG">Blog Post</option>
                      <option value="NEWSLETTER">Newsletter</option>
                      <option value="SOCIAL_POST">Social Media Post</option>
                      <option value="EMAIL">Email</option>
                    </select>
                  </div>

                  {/* Tone */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Tone
                    </label>
                    <select
                      value={formData.tone}
                      onChange={(e) => setFormData({ ...formData, tone: e.target.value })}
                      className="input w-full"
                      disabled={generating}
                    >
                      <option value="professional">Professional</option>
                      <option value="casual">Casual</option>
                      <option value="friendly">Friendly</option>
                      <option value="authoritative">Authoritative</option>
                      <option value="conversational">Conversational</option>
                    </select>
                  </div>

                  {/* Length */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Length
                    </label>
                    <select
                      value={formData.length}
                      onChange={(e) => setFormData({ ...formData, length: e.target.value })}
                      className="input w-full"
                      disabled={generating}
                    >
                      <option value="short">Short (100-300 words)</option>
                      <option value="medium">Medium (300-800 words)</option>
                      <option value="long">Long (800+ words)</option>
                    </select>
                  </div>

                  {/* Keywords */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Keywords (comma-separated)
                    </label>
                    <input
                      type="text"
                      value={formData.keywords}
                      onChange={(e) => setFormData({ ...formData, keywords: e.target.value })}
                      className="input w-full"
                      placeholder="keyword1, keyword2, keyword3"
                      disabled={generating}
                    />
                  </div>

                  {/* Target Audience */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Target Audience
                    </label>
                    <input
                      type="text"
                      value={formData.targetAudience}
                      onChange={(e) => setFormData({ ...formData, targetAudience: e.target.value })}
                      className="input w-full"
                      placeholder="e.g., Marketing professionals, Small business owners"
                      disabled={generating}
                    />
                  </div>

                  {/* Actions */}
                  <div className="flex space-x-3 pt-4">
                    <button
                      onClick={handleGenerate}
                      className="btn-primary flex-1"
                      disabled={generating || !formData.prompt.trim()}
                    >
                      {generating ? (
                        <>
                          <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                          </svg>
                          Generating...
                        </>
                      ) : (
                        'Generate Content'
                      )}
                    </button>
                    <button
                      onClick={handleClear}
                      className="btn-outline"
                      disabled={generating}
                    >
                      Clear
                    </button>
                  </div>
                </div>
              </div>
            </div>

            {/* Generated Content */}
            <div className="space-y-6">
              <div className="card">
                <div className="card-header">
                  <h3 className="card-title">Generated Content</h3>
                  <p className="card-description">
                    Review and edit the AI-generated content
                  </p>
                </div>
                <div className="card-content">
                  {generatedContent ? (
                    <div className="space-y-4">
                      <div className="bg-gray-50 p-4 rounded-lg">
                        <div 
                          className="prose max-w-none"
                          dangerouslySetInnerHTML={{ 
                            __html: generatedContent
                              .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                              .replace(/\*(.*?)\*/g, '<em>$1</em>')
                              .replace(/---/g, '<hr class="my-4 border-gray-300">')
                              .replace(/\n/g, '<br>')
                          }}
                        />
                      </div>
                      <div className="flex space-x-3">
                        <button
                          onClick={handleSaveContent}
                          className="btn-primary"
                          disabled={loading}
                        >
                          {loading ? 'Saving...' : 'Save as Draft'}
                        </button>
                        <button
                          onClick={() => setGeneratedContent('')}
                          className="btn-outline"
                          disabled={loading}
                        >
                          Clear
                        </button>
                      </div>
                    </div>
                  ) : (
                    <div className="text-center py-12">
                      <div className="text-gray-400 text-6xl mb-4">🤖</div>
                      <h3 className="text-lg font-medium text-gray-900 mb-2">
                        No content generated yet
                      </h3>
                      <p className="text-gray-500">
                        Fill out the form and click "Generate Content" to create AI-powered content.
                      </p>
                    </div>
                  )}
                </div>
              </div>
            </div>

            {/* Quality Check Results */}
            <div className="space-y-6">
              <QualityCheckResults 
                content={generatedContent} 
                contentType={formData.contentType}
              />
              <OptimizationSuggestions 
                content={generatedContent} 
                contentType={formData.contentType}
                targetAudience={formData.targetAudience}
                keywords={formData.keywords.split(',').map(k => k.trim()).filter(k => k)}
              />
            </div>
          </div>
        </div>
      </AppShell>
    </ContentManager>
  );
}
